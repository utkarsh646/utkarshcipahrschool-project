SocialConnect :

Repository Name: SocialConnect

Description:
SocialConnect is a dynamic social media application designed to foster connections and communication between users. This project enables users to create profiles, make friends, send messages, and form groups

Features:

User registration with detailed profiles (name, age, gender, etc.)
Friendships management: add and view friends
Messaging system: send and receive messages
Group creation and management: add members and display group details
Simple and engaging user interface

CODE:
#include <iostream>
#include <map>
#include <set>
#include <vector>
#include <string>

using namespace std;

class User {
public:
    string firstName;
    string lastName;
    int age;
    string gender;

    User() {}

    User(string firstName, string lastName, int age, string gender) {
        this->firstName = firstName;
        this->lastName = lastName;
        this->age = age;
        this->gender = gender;
    }
};

class Message {
public:
    string sender;
    string receiver;
    string content;

    Message(string sender, string receiver, string content) {
        this->sender = sender;
        this->receiver = receiver;
        this->content = content;
    }
};

class Group {
public:
    string groupName;
    set<string> members;

    Group() {}

    Group(string groupName) {
        this->groupName = groupName;
    }

    void addMember(string userName) {
        members.insert(userName);
    }

    void displayMembers() const {
        cout << "Group " << groupName << " members: ";
        for (const auto& member : members) {
            cout << member << " ";
        }
        cout << endl;
    }
};

map<string, User> mapUserName;
map<string, set<string>> Friends;
map<string, vector<Message>> userMessages;
map<string, Group> groups;

void addUser(string userName, User user) {
    if (mapUserName.find(userName) == mapUserName.end()) {
        mapUserName[userName] = user;
        cout << "User " << userName << " added successfully.\n";
    } else {
        cout << "UserName already taken.\n";
    }
}

void makeThemFriend(string userName1, string userName2) {
    Friends[userName1].insert(userName2);
    Friends[userName2].insert(userName1);
    cout << "Friendship between " << userName1 << " and " << userName2 << " added successfully.\n";
}

void displayAllUsers() {
    cout << "\nAll Users:\n";
    for (const auto& user : mapUserName) {
        cout << "UserName: " << user.first << ", Name: " << user.second.firstName << " " << user.second.lastName << "\n";
    }
}

void displayAllFriendships() {
    cout << "\nAll Friendships:\n";
    for (const auto& friendship : Friends) {
        cout << friendship.first << ": ";
        for (const auto& friendName : friendship.second) {
            cout << friendName << " ";
        }
        cout << "\n";
    }
}

void sendMessage(string sender, string receiver, string content) {
    Message message(sender, receiver, content);
    userMessages[receiver].push_back(message);
    cout << "Message from " << sender << " to " << receiver << " sent successfully.\n";
}

void displayUserMessages(string userName) {
    cout << "\nMessages for " << userName << ":\n";
    if (userMessages.find(userName) != userMessages.end()) {
        for (const auto& message : userMessages[userName]) {
            cout << "From: " << message.sender << ", Message: " << message.content << "\n";
        }
    } else {
        cout << "No messages for " << userName << endl;
    }
}

int main() {
    User alice("Alice", "Mishra", 30, "Female");
    User bob("Bob", "Ali", 27, "Male");
    User charlie("Charlie", "Brown", 25, "Male");

    addUser("Alice", alice);
    addUser("Bob", bob);
    addUser("Charlie", charlie);

    makeThemFriend("Alice", "Bob");
    makeThemFriend("Alice", "Charlie");

    displayAllUsers();
    displayAllFriendships();

    sendMessage("Alice", "Bob", "Hello Bob!");
    sendMessage("Bob", "Alice", "Hi Alice!");

    cout << "\nMessages for Bob:" << endl;
    displayUserMessages("Bob");

    cout << "\nMessages for Alice:" << endl;
    displayUserMessages("Alice");

    Group group1("Friends");
    group1.addMember("Alice");
    group1.addMember("Bob");
    groups["Friends"] = group1;

    cout << "\nGroups:" << endl;
    for (const auto& group : groups) {
        group.second.displayMembers();
    }

    string userName, firstName, lastName, gender, user1, user2;
    int age;
    char choice;

    do {
        cout << "\nEnter new user details:\n";
        cout << "UserName: ";
        cin >> userName;
        cout << "First Name: ";
        cin >> firstName;
        cout << "Last Name: ";
        cin >> lastName;
        cout << "Age: ";
        cin >> age;
        cout << "Gender: ";
        cin >> gender;

        addUser(userName, User(firstName, lastName, age, gender));

        cout << "Do you want to add another user? (y/n): ";
        cin >> choice;
    } while (choice == 'y');

    do {
        cout << "\nEnter friendship details:\n";
        cout << "User 1: ";
        cin >> user1;
        cout << "User 2: ";
        cin >> user2;

        makeThemFriend(user1, user2);

        cout << "Do you want to add another friendship? (y/n): ";
        cin >> choice;
    } while (choice == 'y');

    cout << "\nUpdated Friendships:\n";
    displayAllFriendships();

    return 0;
}