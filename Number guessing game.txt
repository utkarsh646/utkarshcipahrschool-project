#include <iostream>
#include <cstdlib>
#include <ctime>
#include <vector>
#include <string>

using namespace std;

// Function prototypes
void displayWelcomeLogo();
void displaySparkles();
void displaySadFace();
void displayLastRounds(const vector<string>& rounds);
void displayStats(int gamesPlayed, int wins, int losses);
void playGame(vector<string>& lastRounds, int& gamesPlayed, int& wins, int& losses);

int main() {
    srand(static_cast<unsigned int>(time(0)));

    vector<string> lastRounds;
    int gamesPlayed = 0, wins = 0, losses = 0;
    char choice;

    do {
        displayWelcomeLogo();
        cout << "Choose an option:" << endl;
        cout << "1. Start a new game" << endl;
        cout << "2. Display the last 3 rounds" << endl;
        cout << "3. Display player statistics" << endl;
        cout << "4. Exit" << endl;
        cin >> choice;

        switch (choice) {
            case '1':
                playGame(lastRounds, gamesPlayed, wins, losses);
                break;
            case '2':
                displayLastRounds(lastRounds);
                break;
            case '3':
                displayStats(gamesPlayed, wins, losses);
                break;
            case '4':
                cout << "Exiting... Goodbye!" << endl;
                break;
            default:
                cout << "Invalid choice. Please try again." << endl;
                break;
        }

    } while (choice != '4');

    return 0;
}

void displayWelcomeLogo() {
    cout << R"(
***************************************************
*                                                 *
*   Welcome to the Number Guessing Game!          *
*                                                 *
*                 Best of Luck!                   *
*                                                 *
***************************************************
    )" << endl;
}

void displaySparkles() {
    cout << R"(
* * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                 *
*   *     *     * *     *     *     *   *   *     *
*     *     *  Congratulations! You win!  *   *   *
*   *     *     * *     *     *     *   *   *     *
*                                                 *
* * * * * * * * * * * * * * * * * * * * * * * * * *
    )" << endl;
}

void displaySadFace() {
    cout << R"(
***************************************************
*                                                 *
*       (*) (*)  Better luck next time!   (*) (*) *
*         ___                             ___     *
*                                                 *
***************************************************
    )" << endl;
}

void displayLastRounds(const vector<string>& rounds) {
    cout << R"(
***************************************************
*                                                 *
*               Last 3 Rounds Results             *
*                                                 *
***************************************************
    )" << endl;

    if (rounds.empty()) {
        cout << "No rounds have been played yet." << endl;
    } else {
        for (const string& round : rounds) {
            cout << round << endl;
        }
    }
}

void displayStats(int gamesPlayed, int wins, int losses) {
    cout << R"(
***************************************************
*                                                 *
*               Player Statistics                 *
*                                                 *
***************************************************
    )" << endl;
    cout << "* Games Played: " << gamesPlayed << "                       *" << endl;
    cout << "* Wins: " << wins << "                                *" << endl;
    cout << "* Losses: " << losses << "                              *" << endl;
    cout << "***************************************************" << endl;
}

void playGame(vector<string>& lastRounds, int& gamesPlayed, int& wins, int& losses) {
    int maxRange = 100;
    int attempts = 5;

    cout << "Select difficulty level:" << endl;
    cout << "1. Easy (1-50, 7 attempts)" << endl;
    cout << "2. Medium (1-100, 5 attempts)" << endl;
    cout << "3. Hard (1-200, 3 attempts)" << endl;
    int difficulty;
    cin >> difficulty;

    switch (difficulty) {
        case 1:
            maxRange = 50;
            attempts = 7;
            break;
        case 2:
            maxRange = 100;
            attempts = 5;
            break;
        case 3:
            maxRange = 200;
            attempts = 3;
            break;
        default:
            cout << "Invalid difficulty level. Setting to Medium (1-100, 5 attempts)." << endl;
            break;
    }

    int randomNumber = rand() % maxRange + 1;
    bool win = false;
    int guess;
    int tries = 0;
    string result;

    while (!win && tries < attempts) {
        cout << "Guess a number between 1 and " << maxRange << ": ";
        cin >> guess;
        tries++;

        if (guess == randomNumber) {
            displaySparkles();
            cout << "Congratulations! You guessed the number in " << tries << " tries!" << endl;
            win = true;
            wins++;
            result = "Win: Guessed the number " + to_string(randomNumber) + " in " + to_string(tries) + " tries.";
        } else if (tries == attempts) {
            displaySadFace();
            cout << "Sorry, the correct number was " << randomNumber << ". Better luck next time!" << endl;
            losses++;
            result = "Loss: Did not guess the number " + to_string(randomNumber) + " in " + to_string(attempts) + " tries.";
        } else if (guess < randomNumber) {
            cout << "Too low! ";
        } else {
            cout << "Too high! ";
        }

        if (!win && tries < attempts) {
            int range = maxRange / 10;
            if (abs(guess - randomNumber) <= range) {
                cout << "You're very close!" << endl;
            } else if (abs(guess - randomNumber) <= range * 2) {
                cout << "You're close!" << endl;
            } else {
                cout << "Not close." << endl;
            }
        }
    }

    gamesPlayed++;
    if (lastRounds.size() == 3) {
        lastRounds.erase(lastRounds.begin());
    }
    lastRounds.push_back(result);
}
